generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int            @id @default(autoincrement())
  department_id Int
  full_name     String         @db.VarChar(150)
  tel           String         @db.VarChar(10)
  image         String?        @db.VarChar(255)
  status        Int            @default(1)
  line_name     String         @db.VarChar(150)
  line_id       String         @unique(map: "fk_user_line_id") @db.VarChar(255)
  created_at    DateTime       @default(now()) @db.DateTime(0)
  updated_at    DateTime       @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  booking_list  booking_list[]
  department    department     @relation(fields: [department_id], references: [id], onUpdate: Restrict, map: "fk_user_department_id")

  @@index([department_id], map: "fk_user_department_id")
}

model role {
  id          Int               @id @default(autoincrement())
  name        String            @unique @db.VarChar(150)
  description String?           @db.VarChar(255)
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now()) @db.DateTime(0)
  updated_at  DateTime          @updatedAt @db.DateTime(0)
  admin       admin[]
  permissions role_permission[]
}

model resource {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  permissions role_permission[]
}

model action {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  permissions role_permission[]
}

model role_permission {
  id          Int      @id @default(autoincrement())
  role_id     Int
  resource_id Int
  action_id   Int
  granted     Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  action      action   @relation(fields: [action_id], references: [id], onDelete: Cascade, map: "role_permission_ibfk_1")
  resource    resource @relation(fields: [resource_id], references: [id], onDelete: Cascade, map: "role_permission_ibfk_2")
  role        role     @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "role_permission_ibfk_3")

  @@unique([role_id, resource_id, action_id])
  @@index([action_id], map: "role_permission_action_id_fkey")
  @@index([resource_id], map: "role_permission_resource_id_fkey")
}

model amphure {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(150)
  province_id Int        @default(0)
  created_at  DateTime   @default(now()) @db.DateTime(0)
  updated_at  DateTime   @default(now()) @updatedAt @db.DateTime(0)
  province    province   @relation(fields: [province_id], references: [id], onUpdate: Restrict, map: "amphure_ibfk_1")
  district    district[]

  @@index([province_id], map: "fk_amphure_to_province")
}

model district {
  id         Int      @id @default(autoincrement())
  zip_code   String   @db.VarChar(8)
  name       String   @db.VarChar(150)
  amphure_id Int      @default(0)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  amphure    amphure  @relation(fields: [amphure_id], references: [id], onUpdate: Restrict, map: "district_ibfk_1")

  @@index([amphure_id], map: "fk_district_to_amphure")
}

model province {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(150)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at     DateTime   @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  amphure    amphure[]
}

model accessory {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  detail         String?          @db.Text
  image          String           @db.VarChar(50)
  status         Int              @default(1)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  room_accessory room_accessory[]
}

model admin {
  id                 Int       @id @default(autoincrement())
  email              String    @unique(map: "user_email_key") @db.VarChar(60)
  password           String    @db.VarChar(255)
  image              String?   @db.VarChar(50)
  name               String    @db.VarChar(150)
  reset_token        String?   @db.VarChar(255)
  reset_token_expiry DateTime? @db.DateTime(0)
  refresh_token      String?   @db.VarChar(255)
  role_id            Int
  status          Int   @default(1)
  created_at         DateTime  @default(now())
  updated_at     DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  role               role      @relation(fields: [role_id], references: [id], map: "admin_ibfk_1")

  @@index([role_id], map: "user_role_id_fkey")
}

model booking_list {
  id             Int        @id @default(autoincrement())
  department_id  Int
  user_id        Int
  room_id        Int
  booking_number String     @db.VarChar(10)
  tel            String     @db.VarChar(10)
  user_name      String     @db.VarChar(150)
  title          String     @db.VarChar(255)
  detail         String?    @db.Text
  book_start     DateTime   @db.DateTime(0)
  book_end       DateTime   @db.DateTime(0)
  status         Int              @default(1)
  created_at     DateTime   @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  department     department @relation(fields: [department_id], references: [id], onUpdate: Restrict, map: "fk_booking_list_department")
  room           room       @relation(fields: [room_id], references: [id], onUpdate: Restrict, map: "fk_booking_list_room")
  user           user       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_booking_list_user")

  @@index([department_id], map: "fk_booking_list_department")
  @@index([room_id], map: "fk_booking_list_room")
  @@index([user_id], map: "fk_booking_list_user")
}

model department {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50) @unique(map: "name_department_key")
  status       Int            @default(1)
  created_at   DateTime       @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  booking_list booking_list[]
  user         user[]
}

model room {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(150)
  detail         String?          @db.Text
  location       String           @db.VarChar(255)
  size           String           @db.VarChar(20)
  capacity       String           @db.VarChar(255)
  status         Int              @default(1)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @updatedAt @db.DateTime(0)
  booking_list   booking_list[]
  room_accessory room_accessory[]
  room_image     room_image[]
}

model room_accessory {
  id           Int       @id @default(autoincrement())
  room_id      Int
  accessory_id Int
  accessory    accessory @relation(fields: [accessory_id], references: [id], onDelete: Cascade, map: "fk_room_accessory")
  room         room      @relation(fields: [room_id], references: [id], onDelete: Cascade, map: "fk_room_accessory_room")

  @@index([accessory_id], map: "fk_room_accessory")
  @@index([room_id], map: "fk_room_accessory_room")
}

model room_image {
  id      Int    @id @default(autoincrement())
  room_id Int
  image   String @db.VarChar(50)
  room    room   @relation(fields: [room_id], references: [id], onDelete: Cascade, map: "fk_room_image")

  @@index([room_id], map: "fk_room_image")
}
